---
- name: install required tools to run backup
  apt: name={{ item }} state=installed
  with_items: 
    - libacl1-dev
    - libfuse-dev
    - pkg-config
    - python3-dev
    - libssl-dev

- name: install required tools to run backup
  apt: name={{ item }} state=installed
  with_items:
    - python3-pip
  when: ansible_distribution_release != "precise"

- name: install required tools to run backup
  apt: name={{ item }} state=installed
  with_items:
    - python3-setuptools
  when: ansible_distribution_release == "precise"

- easy_install: name=pip executable="easy_install3"
  when: ansible_distribution_release == "precise"

- name: install attic
  pip: name={{ item }} executable={{ pip_exec }}
  with_items:
    - "attic==0.16"
    - "llfuse==0.40"

# Example for rolling-upgrades/new installs at once:
# once this is executed on all machines, this can become: 
# shell: ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N "" creates=~/.ssh/id_rsa.pub
# this way we are idempotent.
- name: generate ssh key for this machine
  shell: if [ -f ~/.ssh/id_rsa ]; then rm -f ~/.ssh/id_rsa; fi && ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N "" creates=~/.ssh/id_rsa.pub

- name: fetch ssh-key
  shell: cat /root/.ssh/id_rsa.pub
  register: sshkey
  changed_when: False

- name: generate passphrase
  shell: openssl passwd -in /dev/urandom | head -1 creates=/root/.attic.passphrase
  register: initpass

- name: write passphrase
  lineinfile: dest=/root/.attic.passphrase state=present line='export ATTIC_PASSPHRASE="{{ initpass.stdout }}"' create=yes
  when: initpass.changed

- name: fetch passphrase
  shell: grep ATTIC_PASSPHRASE /root/.attic.passphrase | cut -d '"' -f 2
  register: atticpassphrase
  changed_when: False

- name: write passphrase to backupserver
  lineinfile: dest={{ server_backup_dir }}/home/{{ inventory_hostname }}/.attic.passphrase line='export ATTIC_PASSPHRASE="{{ atticpassphrase.stdout }}"' create=yes 
  delegate_to: "{{ item }}"
  with_items: "{{ groups.backupservers }}"
  when: initpass.changed

- name: create backup-user for this machine on the backup-server
  user: name={{ inventory_hostname }} group=sshbackup shell=/bin/bash createhome=no
  delegate_to: "{{ item }}"
  with_items: "{{ groups.backupservers }}"

- name: create home 
  file: dest={{ server_backup_dir }}/home/{{ inventory_hostname }}/ state=directory owner={{ inventory_hostname }} group=sshbackup mode=0755
  delegate_to: "{{ item }}"
  with_items: "{{ groups.backupservers }}"

- name: create sshdir
  file: dest={{ server_backup_dir }}/home/{{ inventory_hostname }}/.ssh state=directory owner={{ inventory_hostname }} group=sshbackup mode=0700
  delegate_to: "{{ item }}"
  with_items: "{{ groups.backupservers }}"

- name: place sshpubkey on the backupserver
  lineinfile: dest={{ server_backup_dir }}/home/{{ inventory_hostname }}/.ssh/authorized_keys line="{{ sshkey.stdout }}" create=yes owner={{ inventory_hostname }} group=sshbackup mode=0600
  delegate_to: "{{ item }}"
  with_items: "{{ groups.backupservers }}"

- name: template sshconfig for backup-hosts
  template: src=ssh.config.j2 dest=/root/.ssh/config owner=root group=root

- name: ensure old backup-script is removed
  file: dest=/root/attic-backup.sh state=absent

- name: check for mysql
  stat: path=/var/lib/automysqlbackup
  register: automysql

- name: disable automysqlbackup cronjob, it's in our pre-attic-tasks 
  lineinfile: dest=/etc/cron.daily/automysqlbackup regexp="^/usr/sbin/automysqlbackup$" line="#/usr/sbin/automysqlbackup" state=present backrefs=yes create=no
  when: automysql.stat.isdir is defined and automysql.stat.isdir == True

- name: place backup-script
  template: src=attic-backup.sh.j2 dest=/usr/local/bin/attic-backup owner=root group=root mode=0700

- name: create backup-directory on remote server
  shell: /usr/local/bin/attic-backup init
  register: backup_init
  changed_when: "'Remember your passphrase' in backup_init.stderr"

- name: ensure cronjob to backup is removed from cron
  cron: name="attic-backup" minute="{{ 59 |random}}" job="/usr/local/bin/attic-backup backup" state=absent

- name: place cronjob-file in cron.d
  template: src=backup.cron.j2 dest=/etc/cron.d/attic-backup mode=0755 owner=root group=root
